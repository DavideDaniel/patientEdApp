<!DOCTYPE html>
<html>
    <head>
        <title>+ health</title>
        <link href='http://fonts.googleapis.com/css?family=Open+Sans:400italic,600,400' rel='stylesheet' type='text/css'>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>

        <!-- Viewport mobile tag for sensible mobile support -->
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css">
        <link rel="stylesheet" href="/styles/app.css">
    </head>

    <!--
            Stylesheets and Preprocessors
            ==============================
            You can always bring in CSS files manually with `<link>` tags, or asynchronously
                using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
                of Sails' conventional asset pipeline (boilerplate Gruntfile).

                By default, stylesheets from your `assets/styles` folder are included
                here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
                are supported. In production, your styles will be minified and concatenated into
                a single file.
                
                To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
                For example, here are a few things you could do:
                    
                    + Change the order of your CSS files
                    + Import stylesheets from other directories
                    + Use a different or additional preprocessor, like SASS, SCSS or Stylus
        -->
        <!--STYLES-->
        <link rel="stylesheet" href="/styles/app.css">
        <link rel="stylesheet" href="/styles/bootstrap.css">
        <link rel="stylesheet" href="/styles/importer.css">
        <link rel="stylesheet" href="/styles/jasny-bootstrap.min.css">
        <!--STYLES END-->

    </head>

    <body class = "canvas">
    
    <div class="container-fluid col-md-16">
    <div class="navbar navbar-inverse navbar-fixed-top" role="navigation">
      <div class="container-fluid col-md-16">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="#"><i class="fa fa-plus"></i> health</a>
        </div>
        <div class="collapse navbar-collapse">
          <ul class="nav navbar-nav">
            <li class="active"><%- link_to('Home', '/') %></li>
            <li><a href="http://github.com/davidedaniel">About</a></li>
          </ul>
        </div>
      </div>
    </div>

    

        

        <%- body %>
    </div>

        

        <!--
                Client-side Templates
                ========================
                HTML templates are important prerequisites of modern, rich client applications.
                To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
                that you load these templates client-side.

                By default, your Gruntfile is configured to automatically load and precompile
                client-side JST templates in your `assets/templates` folder, then
                include them here automatically (between TEMPLATES and TEMPLATES END).
                
                To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
                For example, here are a few things you could do:
                    + Import templates from other directories
                    + Use a different template engine (handlebars, jade, dust, etc.)
                    + Internationalize your client-side templates using a server-side
                    stringfile before they're served.
        -->

        <!--TEMPLATES-->
        
        <!--TEMPLATES END-->

        <!--
            Client-side Javascript
            ========================

            You can always bring in JS files manually with `script` tags, or asynchronously
            on the client using a solution like AMD (RequireJS).  Or, if you like, you can
            take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).
            By default, files in your `assets/js` folder are included here
            automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
            CoffeeScript (.coffee) are supported. In production, your scripts will be minified
            and concatenated into a single file.
            
            To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
            For example, here are a few things you could do:
                
                + Change the order of your scripts
                + Import scripts from other directories
                + Use a different preprocessor, like TypeScript

        -->
        <footer class="footer col-md-16">

                  </footer>

        <!--SCRIPTS-->
        <script src="/js/dependencies/sails.io.js"></script>
        <script src="/js/dependencies/jquery-2.1.3.min.js"></script>
        <script src="/js/dependencies/underscore-min.js"></script>
        <script src="/js/backbone-min.js"></script>
        <script src="/js/bootstrap.js"></script>
        <script src="/js/draggabilly.pkgd.min.js"></script>
        <script src="/js/jasny-bootstrap.min.js"></script>
        <script src="/js/packery.pkgd.min.js"></script>
        <script src="/js/sails.io.backbone.js"></script>
        <!--SCRIPTS END-->
    </body>
</html>